package metrics

import (
	"fmt"
	. "github.com/smartystreets/goconvey/convey"
	"math/rand"
	"sort"
	"testing"
)

func isInOrder(e *expLL) {
	var prev *llNode
	count := 0
	for i := e.head; i != nil; i = i.next {
		count++
		if prev != nil {
			if i.val < prev.val {
				panic("values are not in order")
			}
		}
		if i.next != nil {
			if i != i.next.prev {
				fmt.Println(i.next, i.next.prev)
				panic(fmt.Sprintf("previous and next pointers don't match %d", count))
			}
		}
		prev = i
	}
	if count != e.size {
		panic(fmt.Sprintf("not size correct %d %d", count, e.size))
	}
	var last int64
	ll := len(e.skip)
	for i := 0; i < ll; i++ {
		if i == 0 {
			if e.skip[i].prev != nil {
				panic("first entry in skip list should have nil prev")
			}
		}
		if e.skip[i].next == nil && i < ll-1 {
			panic("skip map entry points to nil in middle of skip map")
		}
		if last != 0 {
			if e.skip[i].val < last {
				panic("skip map values not in order")
			}
		}
		last = e.skip[i].val
	}
}

func TestExpLLDupe(t *testing.T) {
	Convey("test expLL", t, func() {
		ll := newExpLL(1000000)
		n := 10000
		for i := 0; i < n; i++ {
			ll.Push(rand.Int63n(5))
			isInOrder(ll)
		}
		So(n, ShouldEqual, len(ll.Values()))
	})
}

func rank(values int64Slice, v int64) float64 {
	size := len(values)
	if size > 0 {
		sort.Sort(values)
		index := sort.Search(size, func(x int) bool { return values[x] > v })
		if index > 0 {
			// could interpolate if we wanted to
			return float64(index) / float64(size+1)
		}
	}
	return 0
}

func TestEquiv(t *testing.T) {
	Convey("test expLL", t, func() {
		reservoirSize := 1023
		values := []int64{282, 284, 284, 286, 298, 310, 311, 312, 331, 331, 332, 333, 335, 337, 339, 339, 340, 340, 341, 341, 343, 343, 344, 345, 346, 346, 347, 348, 349, 349, 349, 350, 351, 351, 352, 352, 352, 353, 355, 355, 355, 356, 356, 356, 357, 357, 357, 357, 357, 359, 360, 360, 360, 361, 362, 362, 363, 363, 365, 365, 366, 366, 367, 367, 368, 368, 370, 371, 372, 372, 372, 372, 373, 373, 373, 373, 375, 375, 376, 376, 376, 376, 379, 380, 380, 380, 381, 381, 382, 382, 382, 383, 384, 385, 385, 385, 386, 386, 386, 386, 386, 387, 387, 387, 387, 388, 388, 388, 389, 390, 390, 391, 391, 391, 391, 392, 392, 392, 393, 393, 393, 394, 394, 394, 394, 394, 395, 395, 395, 395, 395, 396, 396, 396, 396, 396, 397, 397, 397, 398, 398, 399, 399, 399, 399, 399, 399, 400, 400, 401, 401, 401, 402, 402, 403, 403, 403, 404, 404, 404, 405, 405, 405, 405, 406, 406, 406, 406, 406, 406, 406, 407, 407, 407, 407, 408, 408, 408, 408, 408, 409, 409, 409, 409, 410, 410, 411, 411, 411, 411, 411, 411, 411, 412, 412, 412, 412, 413, 413, 413, 413, 414, 414, 414, 414, 415, 415, 416, 416, 416, 416, 416, 416, 417, 417, 417, 417, 418, 418, 418, 418, 418, 418, 418, 419, 419, 420, 420, 420, 420, 421, 421, 421, 421, 421, 421, 421, 421, 421, 422, 422, 422, 422, 423, 423, 424, 424, 424, 425, 426, 426, 426, 426, 426, 426, 427, 427, 427, 427, 427, 427, 428, 429, 429, 429, 429, 429, 430, 430, 430, 430, 430, 431, 431, 431, 431, 431, 431, 431, 431, 432, 432, 432, 432, 432, 432, 432, 433, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 435, 435, 435, 435, 436, 436, 436, 437, 437, 438, 438, 438, 438, 439, 439, 439, 439, 439, 440, 440, 440, 440, 440, 440, 440, 440, 441, 441, 441, 442, 442, 442, 442, 442, 443, 443, 443, 443, 443, 444, 444, 444, 444, 445, 445, 445, 445, 445, 445, 446, 446, 446, 447, 447, 448, 448, 449, 449, 449, 450, 450, 451, 452, 452, 452, 453, 453, 453, 454, 456, 456, 456, 457, 458, 458, 458, 459, 459, 460, 460, 460, 460, 460, 461, 462, 462, 462, 462, 463, 463, 463, 463, 463, 463, 463, 464, 464, 464, 465, 465, 465, 465, 465, 465, 467, 467, 467, 467, 468, 468, 469, 469, 469, 469, 470, 471, 471, 471, 472, 473, 475, 475, 476, 476, 476, 477, 477, 478, 478, 479, 479, 480, 480, 481, 481, 481, 481, 482, 482, 484, 484, 485, 486, 486, 486, 486, 487, 487, 487, 488, 489, 489, 491, 492, 492, 492, 492, 493, 494, 494, 495, 495, 495, 496, 496, 498, 498, 498, 498, 499, 499, 499, 500, 500, 501, 503, 503, 503, 503, 505, 506, 506, 506, 506, 507, 507, 508, 508, 508, 509, 510, 511, 512, 512, 512, 513, 513, 513, 514, 514, 515, 515, 516, 517, 519, 519, 519, 519, 520, 520, 521, 525, 526, 526, 527, 528, 528, 528, 530, 531, 531, 531, 532, 532, 534, 534, 535, 536, 537, 538, 538, 538, 538, 538, 540, 541, 541, 542, 542, 542, 543, 543, 544, 544, 544, 547, 547, 547, 547, 548, 548, 549, 549, 550, 550, 550, 551, 552, 554, 555, 555, 555, 556, 559, 561, 563, 565, 565, 565, 566, 571, 571, 571, 571, 575, 576, 577, 577, 578, 578, 579, 581, 581, 584, 587, 591, 591, 592, 593, 595, 597, 598, 602, 602, 608, 608, 609, 613, 613, 616, 617, 618, 621, 624, 626, 631, 634, 634, 635, 636, 639, 641, 642, 644, 655, 655, 657, 658, 659, 664, 665, 667, 668, 669, 671, 671, 673, 677, 677, 684, 691, 693, 694, 697, 698, 700, 709, 711, 713, 717, 721, 722, 722, 722, 727, 733, 738, 738, 748, 750, 756, 757, 757, 767, 775, 783, 784, 788, 795, 797, 816, 828, 846, 888, 906, 907, 916, 924, 938, 975, 976, 978, 987, 1021, 1127, 1166, 1186, 1221, 1271, 1281, 1289, 1294, 1296, 1308, 1313, 1314, 1316, 1327, 1332, 1334, 1340, 1341, 1344, 1344, 1348, 1353, 1355, 1356, 1358, 1359, 1359, 1361, 1362, 1363, 1367, 1370, 1375, 1376, 1379, 1381, 1381, 1382, 1384, 1385, 1397, 1397, 1402, 1403, 1403, 1408, 1409, 1415, 1417, 1418, 1421, 1421, 1422, 1423, 1425, 1427, 1427, 1427, 1428, 1432, 1432, 1433, 1433, 1437, 1438, 1440, 1444, 1444, 1447, 1447, 1449, 1452, 1454, 1454, 1456, 1462, 1463, 1467, 1467, 1468, 1472, 1475, 1475, 1481, 1481, 1484, 1489, 1490, 1496, 1498, 1499, 1502, 1507, 1511, 1515, 1519, 1520, 1521, 1521, 1524, 1526, 1527, 1528, 1532, 1535, 1540, 1544, 1549, 1557, 1559, 1560, 1562, 1562, 1572, 1576, 1581, 1582, 1586, 1599, 1608, 1609, 1621, 1623, 1625, 1628, 1629, 1638, 1640, 1644, 1647, 1648, 1649, 1658, 1661, 1664, 1665, 1665, 1670, 1673, 1675, 1680, 1681, 1688, 1688, 1691, 1695, 1700, 1705, 1705, 1709, 1714, 1716, 1716, 1733, 1747, 1758, 1765, 1770, 1775, 1775, 1776, 1779, 1781, 1785, 1796, 1801, 1802, 1817, 1832, 1837, 1838, 1842, 1843, 1845, 1850, 1851, 1852, 1854, 1857, 1877, 1907, 1912, 1916, 1919, 1920, 1928, 1929, 1933, 1948, 1951, 1955, 1955, 1981, 1981, 1987, 1991, 1991, 1995, 1995, 2014, 2017, 2026, 2029, 2060, 2062, 2065, 2067, 2070, 2073, 2084, 2088, 2094, 2117, 2127, 2142, 2164, 2195, 2197, 2198, 2198, 2200, 2205, 2218, 2224, 2235, 2249, 2251, 2271, 2294, 2296, 2298, 2332, 2359, 2368, 2370, 2395, 2401, 2402, 2405, 2406, 2413, 2417, 2418, 2428, 2437, 2437, 2484, 2526, 2547, 2560, 2564, 2619, 2638, 2642, 2643, 2644, 2649, 2657, 2668, 2694, 2700, 2707, 2725, 2738, 2858, 2861, 2985, 3023, 3032, 3037, 3124, 3292, 3295, 3298, 3404, 3443, 3450, 3528, 3532, 3534, 3624, 3642, 3705, 3745, 3800, 3800, 3826, 3836, 3850, 3853, 4008, 4056, 4060, 4116, 4170, 4255, 4354, 4598, 4609, 4679, 4762, 4910, 4985, 5006, 5048, 5124, 5160, 5160, 5171, 5254, 5266, 5334, 5446, 5778, 6183, 6195, 6897, 7188, 7268, 8312, 8721, 8902, 8970, 9471, 10773, 11461, 11600, 11968, 11997, 12025, 12036, 12187, 13366, 15002, 17512, 17817, 18811, 19736, 19883, 21461, 21836, 22782, 23279, 24130, 25849, 43231, 50765, 51011, 62320, 65756, 72182, 73473, 74294, 78572, 82076, 90267}
		count := 0
		for _, v := range values {
			sample := NewExpDecaySample(reservoirSize, 0.015)
			for _, v := range values {
				sample.Update(v)
			}
			oldRank := rank(values, v)
			newRank := sample.Update(v)
			if newRank > oldRank {
				fmt.Println(v, oldRank, newRank, count)
				count++
			}
		}
		fmt.Println(count, "/", len(values), "greater in new model")
	})
}
func TestExpLL(t *testing.T) {
	Convey("test expLL", t, func() {
		x := 1023
		ll := newExpLL(x)
		n := 10000
		for i := 0; i < n; i++ {
			v := rand.Int63()
			if ll.Size() > x {
				var r int64
				if i%2 == 0 {
					r = ll.Max()
				} else {
					r = ll.Min()
				}
				So(r, ShouldEqual, ll.Remove(r))
				isInOrder(ll)
			}
			ll.Push(v)
			isInOrder(ll)
		}
		So(ll.Min(), ShouldBeLessThanOrEqualTo, ll.Max())
		min := ll.Min()
		So(ll.Remove(min), ShouldEqual, min)
		So(ll.Size(), ShouldEqual, x)

		for i := 0; i < x; i++ {
			v := ll.Min()
			So(ll.Remove(v), ShouldEqual, v)
			isInOrder(ll)
		}
		So(ll.Size(), ShouldEqual, 0)
		ll.Clear()
		So(ll.Size(), ShouldEqual, 0)
	})
}

func BenchmarkIt(b *testing.B) {
	ll := newExpLL(1023)
	b.ResetTimer()
	b.ReportAllocs()
	for i := 0; i < b.N; i++ {
		v := rand.Int63()
		if ll.Size() > 1023 {
			ll.Remove(ll.Min())
		}
		ll.Push(v)
	}
}
